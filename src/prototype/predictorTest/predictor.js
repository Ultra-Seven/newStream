var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;
eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('9 17={3i:\'0.1.3\',16:1e-6};l v(){}v.23={e:l(i){8(i<1||i>7.4.q)?w:7.4[i-1]},2R:l(){8 7.4.q},1u:l(){8 F.1x(7.2u(7))},24:l(a){9 n=7.4.q;9 V=a.4||a;o(n!=V.q){8 1L}J{o(F.13(7.4[n-1]-V[n-1])>17.16){8 1L}}H(--n);8 2x},1q:l(){8 v.u(7.4)},1b:l(a){9 b=[];7.28(l(x,i){b.19(a(x,i))});8 v.u(b)},28:l(a){9 n=7.4.q,k=n,i;J{i=k-n;a(7.4[i],i+1)}H(--n)},2q:l(){9 r=7.1u();o(r===0){8 7.1q()}8 7.1b(l(x){8 x/r})},1C:l(a){9 V=a.4||a;9 n=7.4.q,k=n,i;o(n!=V.q){8 w}9 b=0,1D=0,1F=0;7.28(l(x,i){b+=x*V[i-1];1D+=x*x;1F+=V[i-1]*V[i-1]});1D=F.1x(1D);1F=F.1x(1F);o(1D*1F===0){8 w}9 c=b/(1D*1F);o(c<-1){c=-1}o(c>1){c=1}8 F.37(c)},1m:l(a){9 b=7.1C(a);8(b===w)?w:(b<=17.16)},34:l(a){9 b=7.1C(a);8(b===w)?w:(F.13(b-F.1A)<=17.16)},2k:l(a){9 b=7.2u(a);8(b===w)?w:(F.13(b)<=17.16)},2j:l(a){9 V=a.4||a;o(7.4.q!=V.q){8 w}8 7.1b(l(x,i){8 x+V[i-1]})},2C:l(a){9 V=a.4||a;o(7.4.q!=V.q){8 w}8 7.1b(l(x,i){8 x-V[i-1]})},22:l(k){8 7.1b(l(x){8 x*k})},x:l(k){8 7.22(k)},2u:l(a){9 V=a.4||a;9 i,2g=0,n=7.4.q;o(n!=V.q){8 w}J{2g+=7.4[n-1]*V[n-1]}H(--n);8 2g},2f:l(a){9 B=a.4||a;o(7.4.q!=3||B.q!=3){8 w}9 A=7.4;8 v.u([(A[1]*B[2])-(A[2]*B[1]),(A[2]*B[0])-(A[0]*B[2]),(A[0]*B[1])-(A[1]*B[0])])},2A:l(){9 m=0,n=7.4.q,k=n,i;J{i=k-n;o(F.13(7.4[i])>F.13(m)){m=7.4[i]}}H(--n);8 m},2Z:l(x){9 a=w,n=7.4.q,k=n,i;J{i=k-n;o(a===w&&7.4[i]==x){a=i+1}}H(--n);8 a},3g:l(){8 S.2X(7.4)},2d:l(){8 7.1b(l(x){8 F.2d(x)})},2V:l(x){8 7.1b(l(y){8(F.13(y-x)<=17.16)?x:y})},1o:l(a){o(a.K){8 a.1o(7)}9 V=a.4||a;o(V.q!=7.4.q){8 w}9 b=0,2b;7.28(l(x,i){2b=x-V[i-1];b+=2b*2b});8 F.1x(b)},3a:l(a){8 a.1h(7)},2T:l(a){8 a.1h(7)},1V:l(t,a){9 V,R,x,y,z;2S(7.4.q){27 2:V=a.4||a;o(V.q!=2){8 w}R=S.1R(t).4;x=7.4[0]-V[0];y=7.4[1]-V[1];8 v.u([V[0]+R[0][0]*x+R[0][1]*y,V[1]+R[1][0]*x+R[1][1]*y]);1I;27 3:o(!a.U){8 w}9 C=a.1r(7).4;R=S.1R(t,a.U).4;x=7.4[0]-C[0];y=7.4[1]-C[1];z=7.4[2]-C[2];8 v.u([C[0]+R[0][0]*x+R[0][1]*y+R[0][2]*z,C[1]+R[1][0]*x+R[1][1]*y+R[1][2]*z,C[2]+R[2][0]*x+R[2][1]*y+R[2][2]*z]);1I;2P:8 w}},1t:l(a){o(a.K){9 P=7.4.2O();9 C=a.1r(P).4;8 v.u([C[0]+(C[0]-P[0]),C[1]+(C[1]-P[1]),C[2]+(C[2]-(P[2]||0))])}1d{9 Q=a.4||a;o(7.4.q!=Q.q){8 w}8 7.1b(l(x,i){8 Q[i-1]+(Q[i-1]-x)})}},1N:l(){9 V=7.1q();2S(V.4.q){27 3:1I;27 2:V.4.19(0);1I;2P:8 w}8 V},2n:l(){8\'[\'+7.4.2K(\', \')+\']\'},26:l(a){7.4=(a.4||a).2O();8 7}};v.u=l(a){9 V=25 v();8 V.26(a)};v.i=v.u([1,0,0]);v.j=v.u([0,1,0]);v.k=v.u([0,0,1]);v.2J=l(n){9 a=[];J{a.19(F.2F())}H(--n);8 v.u(a)};v.1j=l(n){9 a=[];J{a.19(0)}H(--n);8 v.u(a)};l S(){}S.23={e:l(i,j){o(i<1||i>7.4.q||j<1||j>7.4[0].q){8 w}8 7.4[i-1][j-1]},33:l(i){o(i>7.4.q){8 w}8 v.u(7.4[i-1])},2E:l(j){o(j>7.4[0].q){8 w}9 a=[],n=7.4.q,k=n,i;J{i=k-n;a.19(7.4[i][j-1])}H(--n);8 v.u(a)},2R:l(){8{2D:7.4.q,1p:7.4[0].q}},2D:l(){8 7.4.q},1p:l(){8 7.4[0].q},24:l(a){9 M=a.4||a;o(1g(M[0][0])==\'1f\'){M=S.u(M).4}o(7.4.q!=M.q||7.4[0].q!=M[0].q){8 1L}9 b=7.4.q,15=b,i,G,10=7.4[0].q,j;J{i=15-b;G=10;J{j=10-G;o(F.13(7.4[i][j]-M[i][j])>17.16){8 1L}}H(--G)}H(--b);8 2x},1q:l(){8 S.u(7.4)},1b:l(a){9 b=[],12=7.4.q,15=12,i,G,10=7.4[0].q,j;J{i=15-12;G=10;b[i]=[];J{j=10-G;b[i][j]=a(7.4[i][j],i+1,j+1)}H(--G)}H(--12);8 S.u(b)},2i:l(a){9 M=a.4||a;o(1g(M[0][0])==\'1f\'){M=S.u(M).4}8(7.4.q==M.q&&7.4[0].q==M[0].q)},2j:l(a){9 M=a.4||a;o(1g(M[0][0])==\'1f\'){M=S.u(M).4}o(!7.2i(M)){8 w}8 7.1b(l(x,i,j){8 x+M[i-1][j-1]})},2C:l(a){9 M=a.4||a;o(1g(M[0][0])==\'1f\'){M=S.u(M).4}o(!7.2i(M)){8 w}8 7.1b(l(x,i,j){8 x-M[i-1][j-1]})},2B:l(a){9 M=a.4||a;o(1g(M[0][0])==\'1f\'){M=S.u(M).4}8(7.4[0].q==M.q)},22:l(a){o(!a.4){8 7.1b(l(x){8 x*a})}9 b=a.1u?2x:1L;9 M=a.4||a;o(1g(M[0][0])==\'1f\'){M=S.u(M).4}o(!7.2B(M)){8 w}9 d=7.4.q,15=d,i,G,10=M[0].q,j;9 e=7.4[0].q,4=[],21,20,c;J{i=15-d;4[i]=[];G=10;J{j=10-G;21=0;20=e;J{c=e-20;21+=7.4[i][c]*M[c][j]}H(--20);4[i][j]=21}H(--G)}H(--d);9 M=S.u(4);8 b?M.2E(1):M},x:l(a){8 7.22(a)},32:l(a,b,c,d){9 e=[],12=c,i,G,j;9 f=7.4.q,1p=7.4[0].q;J{i=c-12;e[i]=[];G=d;J{j=d-G;e[i][j]=7.4[(a+i-1)%f][(b+j-1)%1p]}H(--G)}H(--12);8 S.u(e)},31:l(){9 a=7.4.q,1p=7.4[0].q;9 b=[],12=1p,i,G,j;J{i=1p-12;b[i]=[];G=a;J{j=a-G;b[i][j]=7.4[j][i]}H(--G)}H(--12);8 S.u(b)},1y:l(){8(7.4.q==7.4[0].q)},2A:l(){9 m=0,12=7.4.q,15=12,i,G,10=7.4[0].q,j;J{i=15-12;G=10;J{j=10-G;o(F.13(7.4[i][j])>F.13(m)){m=7.4[i][j]}}H(--G)}H(--12);8 m},2Z:l(x){9 a=w,12=7.4.q,15=12,i,G,10=7.4[0].q,j;J{i=15-12;G=10;J{j=10-G;o(7.4[i][j]==x){8{i:i+1,j:j+1}}}H(--G)}H(--12);8 w},30:l(){o(!7.1y){8 w}9 a=[],n=7.4.q,k=n,i;J{i=k-n;a.19(7.4[i][i])}H(--n);8 v.u(a)},1K:l(){9 M=7.1q(),1c;9 n=7.4.q,k=n,i,1s,1n=7.4[0].q,p;J{i=k-n;o(M.4[i][i]==0){2e(j=i+1;j<k;j++){o(M.4[j][i]!=0){1c=[];1s=1n;J{p=1n-1s;1c.19(M.4[i][p]+M.4[j][p])}H(--1s);M.4[i]=1c;1I}}}o(M.4[i][i]!=0){2e(j=i+1;j<k;j++){9 a=M.4[j][i]/M.4[i][i];1c=[];1s=1n;J{p=1n-1s;1c.19(p<=i?0:M.4[j][p]-M.4[i][p]*a)}H(--1s);M.4[j]=1c}}}H(--n);8 M},3h:l(){8 7.1K()},2z:l(){o(!7.1y()){8 w}9 M=7.1K();9 a=M.4[0][0],n=M.4.q-1,k=n,i;J{i=k-n+1;a=a*M.4[i][i]}H(--n);8 a},3f:l(){8 7.2z()},2y:l(){8(7.1y()&&7.2z()===0)},2Y:l(){o(!7.1y()){8 w}9 a=7.4[0][0],n=7.4.q-1,k=n,i;J{i=k-n+1;a+=7.4[i][i]}H(--n);8 a},3e:l(){8 7.2Y()},1Y:l(){9 M=7.1K(),1Y=0;9 a=7.4.q,15=a,i,G,10=7.4[0].q,j;J{i=15-a;G=10;J{j=10-G;o(F.13(M.4[i][j])>17.16){1Y++;1I}}H(--G)}H(--a);8 1Y},3d:l(){8 7.1Y()},2W:l(a){9 M=a.4||a;o(1g(M[0][0])==\'1f\'){M=S.u(M).4}9 T=7.1q(),1p=T.4[0].q;9 b=T.4.q,15=b,i,G,10=M[0].q,j;o(b!=M.q){8 w}J{i=15-b;G=10;J{j=10-G;T.4[i][1p+j]=M[i][j]}H(--G)}H(--b);8 T},2w:l(){o(!7.1y()||7.2y()){8 w}9 a=7.4.q,15=a,i,j;9 M=7.2W(S.I(a)).1K();9 b,1n=M.4[0].q,p,1c,2v;9 c=[],2c;J{i=a-1;1c=[];b=1n;c[i]=[];2v=M.4[i][i];J{p=1n-b;2c=M.4[i][p]/2v;1c.19(2c);o(p>=15){c[i].19(2c)}}H(--b);M.4[i]=1c;2e(j=0;j<i;j++){1c=[];b=1n;J{p=1n-b;1c.19(M.4[j][p]-M.4[i][p]*M.4[j][i])}H(--b);M.4[j]=1c}}H(--a);8 S.u(c)},3c:l(){8 7.2w()},2d:l(){8 7.1b(l(x){8 F.2d(x)})},2V:l(x){8 7.1b(l(p){8(F.13(p-x)<=17.16)?x:p})},2n:l(){9 a=[];9 n=7.4.q,k=n,i;J{i=k-n;a.19(v.u(7.4[i]).2n())}H(--n);8 a.2K(\'\\n\')},26:l(a){9 i,4=a.4||a;o(1g(4[0][0])!=\'1f\'){9 b=4.q,15=b,G,10,j;7.4=[];J{i=15-b;G=4[i].q;10=G;7.4[i]=[];J{j=10-G;7.4[i][j]=4[i][j]}H(--G)}H(--b);8 7}9 n=4.q,k=n;7.4=[];J{i=k-n;7.4.19([4[i]])}H(--n);8 7}};S.u=l(a){9 M=25 S();8 M.26(a)};S.I=l(n){9 a=[],k=n,i,G,j;J{i=k-n;a[i]=[];G=k;J{j=k-G;a[i][j]=(i==j)?1:0}H(--G)}H(--n);8 S.u(a)};S.2X=l(a){9 n=a.q,k=n,i;9 M=S.I(n);J{i=k-n;M.4[i][i]=a[i]}H(--n);8 M};S.1R=l(b,a){o(!a){8 S.u([[F.1H(b),-F.1G(b)],[F.1G(b),F.1H(b)]])}9 d=a.1q();o(d.4.q!=3){8 w}9 e=d.1u();9 x=d.4[0]/e,y=d.4[1]/e,z=d.4[2]/e;9 s=F.1G(b),c=F.1H(b),t=1-c;8 S.u([[t*x*x+c,t*x*y-s*z,t*x*z+s*y],[t*x*y+s*z,t*y*y+c,t*y*z-s*x],[t*x*z-s*y,t*y*z+s*x,t*z*z+c]])};S.3b=l(t){9 c=F.1H(t),s=F.1G(t);8 S.u([[1,0,0],[0,c,-s],[0,s,c]])};S.39=l(t){9 c=F.1H(t),s=F.1G(t);8 S.u([[c,0,s],[0,1,0],[-s,0,c]])};S.38=l(t){9 c=F.1H(t),s=F.1G(t);8 S.u([[c,-s,0],[s,c,0],[0,0,1]])};S.2J=l(n,m){8 S.1j(n,m).1b(l(){8 F.2F()})};S.1j=l(n,m){9 a=[],12=n,i,G,j;J{i=n-12;a[i]=[];G=m;J{j=m-G;a[i][j]=0}H(--G)}H(--12);8 S.u(a)};l 14(){}14.23={24:l(a){8(7.1m(a)&&7.1h(a.K))},1q:l(){8 14.u(7.K,7.U)},2U:l(a){9 V=a.4||a;8 14.u([7.K.4[0]+V[0],7.K.4[1]+V[1],7.K.4[2]+(V[2]||0)],7.U)},1m:l(a){o(a.W){8 a.1m(7)}9 b=7.U.1C(a.U);8(F.13(b)<=17.16||F.13(b-F.1A)<=17.16)},1o:l(a){o(a.W){8 a.1o(7)}o(a.U){o(7.1m(a)){8 7.1o(a.K)}9 N=7.U.2f(a.U).2q().4;9 A=7.K.4,B=a.K.4;8 F.13((A[0]-B[0])*N[0]+(A[1]-B[1])*N[1]+(A[2]-B[2])*N[2])}1d{9 P=a.4||a;9 A=7.K.4,D=7.U.4;9 b=P[0]-A[0],2a=P[1]-A[1],29=(P[2]||0)-A[2];9 c=F.1x(b*b+2a*2a+29*29);o(c===0)8 0;9 d=(b*D[0]+2a*D[1]+29*D[2])/c;9 e=1-d*d;8 F.13(c*F.1x(e<0?0:e))}},1h:l(a){9 b=7.1o(a);8(b!==w&&b<=17.16)},2T:l(a){8 a.1h(7)},1v:l(a){o(a.W){8 a.1v(7)}8(!7.1m(a)&&7.1o(a)<=17.16)},1U:l(a){o(a.W){8 a.1U(7)}o(!7.1v(a)){8 w}9 P=7.K.4,X=7.U.4,Q=a.K.4,Y=a.U.4;9 b=X[0],1z=X[1],1B=X[2],1T=Y[0],1S=Y[1],1M=Y[2];9 c=P[0]-Q[0],2s=P[1]-Q[1],2r=P[2]-Q[2];9 d=-b*c-1z*2s-1B*2r;9 e=1T*c+1S*2s+1M*2r;9 f=b*b+1z*1z+1B*1B;9 g=1T*1T+1S*1S+1M*1M;9 h=b*1T+1z*1S+1B*1M;9 k=(d*g/f+h*e)/(g-h*h);8 v.u([P[0]+k*b,P[1]+k*1z,P[2]+k*1B])},1r:l(a){o(a.U){o(7.1v(a)){8 7.1U(a)}o(7.1m(a)){8 w}9 D=7.U.4,E=a.U.4;9 b=D[0],1l=D[1],1k=D[2],1P=E[0],1O=E[1],1Q=E[2];9 x=(1k*1P-b*1Q),y=(b*1O-1l*1P),z=(1l*1Q-1k*1O);9 N=v.u([x*1Q-y*1O,y*1P-z*1Q,z*1O-x*1P]);9 P=11.u(a.K,N);8 P.1U(7)}1d{9 P=a.4||a;o(7.1h(P)){8 v.u(P)}9 A=7.K.4,D=7.U.4;9 b=D[0],1l=D[1],1k=D[2],1w=A[0],18=A[1],1a=A[2];9 x=b*(P[1]-18)-1l*(P[0]-1w),y=1l*((P[2]||0)-1a)-1k*(P[1]-18),z=1k*(P[0]-1w)-b*((P[2]||0)-1a);9 V=v.u([1l*x-1k*z,1k*y-b*x,b*z-1l*y]);9 k=7.1o(P)/V.1u();8 v.u([P[0]+V.4[0]*k,P[1]+V.4[1]*k,(P[2]||0)+V.4[2]*k])}},1V:l(t,a){o(1g(a.U)==\'1f\'){a=14.u(a.1N(),v.k)}9 R=S.1R(t,a.U).4;9 C=a.1r(7.K).4;9 A=7.K.4,D=7.U.4;9 b=C[0],1E=C[1],1J=C[2],1w=A[0],18=A[1],1a=A[2];9 x=1w-b,y=18-1E,z=1a-1J;8 14.u([b+R[0][0]*x+R[0][1]*y+R[0][2]*z,1E+R[1][0]*x+R[1][1]*y+R[1][2]*z,1J+R[2][0]*x+R[2][1]*y+R[2][2]*z],[R[0][0]*D[0]+R[0][1]*D[1]+R[0][2]*D[2],R[1][0]*D[0]+R[1][1]*D[1]+R[1][2]*D[2],R[2][0]*D[0]+R[2][1]*D[1]+R[2][2]*D[2]])},1t:l(a){o(a.W){9 A=7.K.4,D=7.U.4;9 b=A[0],18=A[1],1a=A[2],2N=D[0],1l=D[1],1k=D[2];9 c=7.K.1t(a).4;9 d=b+2N,2h=18+1l,2o=1a+1k;9 Q=a.1r([d,2h,2o]).4;9 e=[Q[0]+(Q[0]-d)-c[0],Q[1]+(Q[1]-2h)-c[1],Q[2]+(Q[2]-2o)-c[2]];8 14.u(c,e)}1d o(a.U){8 7.1V(F.1A,a)}1d{9 P=a.4||a;8 14.u(7.K.1t([P[0],P[1],(P[2]||0)]),7.U)}},1Z:l(a,b){a=v.u(a);b=v.u(b);o(a.4.q==2){a.4.19(0)}o(b.4.q==2){b.4.19(0)}o(a.4.q>3||b.4.q>3){8 w}9 c=b.1u();o(c===0){8 w}7.K=a;7.U=v.u([b.4[0]/c,b.4[1]/c,b.4[2]/c]);8 7}};14.u=l(a,b){9 L=25 14();8 L.1Z(a,b)};14.X=14.u(v.1j(3),v.i);14.Y=14.u(v.1j(3),v.j);14.Z=14.u(v.1j(3),v.k);l 11(){}11.23={24:l(a){8(7.1h(a.K)&&7.1m(a))},1q:l(){8 11.u(7.K,7.W)},2U:l(a){9 V=a.4||a;8 11.u([7.K.4[0]+V[0],7.K.4[1]+V[1],7.K.4[2]+(V[2]||0)],7.W)},1m:l(a){9 b;o(a.W){b=7.W.1C(a.W);8(F.13(b)<=17.16||F.13(F.1A-b)<=17.16)}1d o(a.U){8 7.W.2k(a.U)}8 w},2k:l(a){9 b=7.W.1C(a.W);8(F.13(F.1A/2-b)<=17.16)},1o:l(a){o(7.1v(a)||7.1h(a)){8 0}o(a.K){9 A=7.K.4,B=a.K.4,N=7.W.4;8 F.13((A[0]-B[0])*N[0]+(A[1]-B[1])*N[1]+(A[2]-B[2])*N[2])}1d{9 P=a.4||a;9 A=7.K.4,N=7.W.4;8 F.13((A[0]-P[0])*N[0]+(A[1]-P[1])*N[1]+(A[2]-(P[2]||0))*N[2])}},1h:l(a){o(a.W){8 w}o(a.U){8(7.1h(a.K)&&7.1h(a.K.2j(a.U)))}1d{9 P=a.4||a;9 A=7.K.4,N=7.W.4;9 b=F.13(N[0]*(A[0]-P[0])+N[1]*(A[1]-P[1])+N[2]*(A[2]-(P[2]||0)));8(b<=17.16)}},1v:l(a){o(1g(a.U)==\'1f\'&&1g(a.W)==\'1f\'){8 w}8!7.1m(a)},1U:l(a){o(!7.1v(a)){8 w}o(a.U){9 A=a.K.4,D=a.U.4,P=7.K.4,N=7.W.4;9 b=(N[0]*(P[0]-A[0])+N[1]*(P[1]-A[1])+N[2]*(P[2]-A[2]))/(N[0]*D[0]+N[1]*D[1]+N[2]*D[2]);8 v.u([A[0]+D[0]*b,A[1]+D[1]*b,A[2]+D[2]*b])}1d o(a.W){9 c=7.W.2f(a.W).2q();9 N=7.W.4,A=7.K.4,O=a.W.4,B=a.K.4;9 d=S.1j(2,2),i=0;H(d.2y()){i++;d=S.u([[N[i%3],N[(i+1)%3]],[O[i%3],O[(i+1)%3]]])}9 e=d.2w().4;9 x=N[0]*A[0]+N[1]*A[1]+N[2]*A[2];9 y=O[0]*B[0]+O[1]*B[1]+O[2]*B[2];9 f=[e[0][0]*x+e[0][1]*y,e[1][0]*x+e[1][1]*y];9 g=[];2e(9 j=1;j<=3;j++){g.19((i==j)?0:f[(j+(5-i)%3)%3])}8 14.u(g,c)}},1r:l(a){9 P=a.4||a;9 A=7.K.4,N=7.W.4;9 b=(A[0]-P[0])*N[0]+(A[1]-P[1])*N[1]+(A[2]-(P[2]||0))*N[2];8 v.u([P[0]+N[0]*b,P[1]+N[1]*b,(P[2]||0)+N[2]*b])},1V:l(t,a){9 R=S.1R(t,a.U).4;9 C=a.1r(7.K).4;9 A=7.K.4,N=7.W.4;9 b=C[0],1E=C[1],1J=C[2],1w=A[0],18=A[1],1a=A[2];9 x=1w-b,y=18-1E,z=1a-1J;8 11.u([b+R[0][0]*x+R[0][1]*y+R[0][2]*z,1E+R[1][0]*x+R[1][1]*y+R[1][2]*z,1J+R[2][0]*x+R[2][1]*y+R[2][2]*z],[R[0][0]*N[0]+R[0][1]*N[1]+R[0][2]*N[2],R[1][0]*N[0]+R[1][1]*N[1]+R[1][2]*N[2],R[2][0]*N[0]+R[2][1]*N[1]+R[2][2]*N[2]])},1t:l(a){o(a.W){9 A=7.K.4,N=7.W.4;9 b=A[0],18=A[1],1a=A[2],2M=N[0],2L=N[1],2Q=N[2];9 c=7.K.1t(a).4;9 d=b+2M,2p=18+2L,2m=1a+2Q;9 Q=a.1r([d,2p,2m]).4;9 e=[Q[0]+(Q[0]-d)-c[0],Q[1]+(Q[1]-2p)-c[1],Q[2]+(Q[2]-2m)-c[2]];8 11.u(c,e)}1d o(a.U){8 7.1V(F.1A,a)}1d{9 P=a.4||a;8 11.u(7.K.1t([P[0],P[1],(P[2]||0)]),7.W)}},1Z:l(a,b,c){a=v.u(a);a=a.1N();o(a===w){8 w}b=v.u(b);b=b.1N();o(b===w){8 w}o(1g(c)==\'1f\'){c=w}1d{c=v.u(c);c=c.1N();o(c===w){8 w}}9 d=a.4[0],18=a.4[1],1a=a.4[2];9 e=b.4[0],1W=b.4[1],1X=b.4[2];9 f,1i;o(c!==w){9 g=c.4[0],2l=c.4[1],2t=c.4[2];f=v.u([(1W-18)*(2t-1a)-(1X-1a)*(2l-18),(1X-1a)*(g-d)-(e-d)*(2t-1a),(e-d)*(2l-18)-(1W-18)*(g-d)]);1i=f.1u();o(1i===0){8 w}f=v.u([f.4[0]/1i,f.4[1]/1i,f.4[2]/1i])}1d{1i=F.1x(e*e+1W*1W+1X*1X);o(1i===0){8 w}f=v.u([b.4[0]/1i,b.4[1]/1i,b.4[2]/1i])}7.K=a;7.W=f;8 7}};11.u=l(a,b,c){9 P=25 11();8 P.1Z(a,b,c)};11.2I=11.u(v.1j(3),v.k);11.2H=11.u(v.1j(3),v.i);11.2G=11.u(v.1j(3),v.j);11.36=11.2I;11.35=11.2H;11.3j=11.2G;9 $V=v.u;9 $M=S.u;9 $L=14.u;9 $P=11.u;',62,206,'||||elements|||this|return|var||||||||||||function|||if||length||||create|Vector|null|||||||||Math|nj|while||do|anchor||||||||Matrix||direction||normal||||kj|Plane|ni|abs|Line|ki|precision|Sylvester|A2|push|A3|map|els|else||undefined|typeof|contains|mod|Zero|D3|D2|isParallelTo|kp|distanceFrom|cols|dup|pointClosestTo|np|reflectionIn|modulus|intersects|A1|sqrt|isSquare|X2|PI|X3|angleFrom|mod1|C2|mod2|sin|cos|break|C3|toRightTriangular|false|Y3|to3D|E2|E1|E3|Rotation|Y2|Y1|intersectionWith|rotate|v12|v13|rank|setVectors|nc|sum|multiply|prototype|eql|new|setElements|case|each|PA3|PA2|part|new_element|round|for|cross|product|AD2|isSameSizeAs|add|isPerpendicularTo|v22|AN3|inspect|AD3|AN2|toUnitVector|PsubQ3|PsubQ2|v23|dot|divisor|inverse|true|isSingular|determinant|max|canMultiplyFromLeft|subtract|rows|col|random|ZX|YZ|XY|Random|join|N2|N1|D1|slice|default|N3|dimensions|switch|liesIn|translate|snapTo|augment|Diagonal|trace|indexOf|diagonal|transpose|minor|row|isAntiparallelTo|ZY|YX|acos|RotationZ|RotationY|liesOn|RotationX|inv|rk|tr|det|toDiagonalMatrix|toUpperTriangular|version|XZ'.split('|'),0,{}))
//var Gaussian = require('multivariate-gaussian');
const longTrace = [[686, 341, 1502811519384, "m"], [686, 335, 1502811519572, "m"], [687, 319, 1502811519586, "m"], [694, 276, 1502811519618, "m"], [694, 253, 1502811519635, "m"], [694, 246, 1502811519653, "m"], [694, 243, 1502811519668, "m"], [694, 239, 1502811519688, "m"], [695, 235, 1502811519719, "m"], [696, 232, 1502811519738, "m"], [699, 228, 1502811519754, "m"], [701, 224, 1502811519769, "m"], [708, 217, 1502811519785, "m"], [716, 206, 1502811519818, "m"], [721, 201, 1502811519835, "m"], [725, 199, 1502811519855, "m"], [730, 196, 1502811519871, "m"], [737, 194, 1502811519885, "m"], [750, 191, 1502811519904, "m"], [793, 191, 1502811519937, "m"], [810, 191, 1502811519953, "m"], [821, 192, 1502811519969, "m"], [831, 193, 1502811519985, "m"], [841, 196, 1502811520018, "m"], [846, 197, 1502811520035, "m"], [852, 198, 1502811520055, "m"], [862, 199, 1502811520070, "m"], [873, 199, 1502811520086, "m"], [915, 202, 1502811520121, "m"], [940, 206, 1502811520136, "m"], [969, 210, 1502811520153, "m"], [992, 214, 1502811520169, "m"], [1008, 215, 1502811520185, "m"], [1025, 215, 1502811520219, "m"], [1034, 215, 1502811520238, "m"], [1047, 216, 1502811520254, "m"], [1059, 219, 1502811520269, "m"], [1074, 220, 1502811520288, "m"], [1092, 220, 1502811520304, "m"], [1135, 220, 1502811520336, "m"], [1156, 220, 1502811520352, "m"], [1175, 220, 1502811520368, "m"], [1204, 220, 1502811520385, "m"], [1227, 208, 1502811520421, "m"], [1233, 199, 1502811520437, "m"], [1238, 189, 1502811520452, "m"], [1240, 181, 1502811520472, "m"], [1244, 171, 1502811520488, "m"], [1245, 163, 1502811520504, "m"], [1245, 145, 1502811520536, "m"], [1245, 138, 1502811520551, "m"], [1242, 128, 1502811520569, "m"], [1236, 119, 1502811520585, "m"], [1235, 116, 1502811520605, "m"], [1231, 112, 1502811520636, "m"], [1226, 110, 1502811520652, "m"], [1220, 107, 1502811520671, "m"], [1211, 105, 1502811520687, "m"], [1196, 103, 1502811520719, "m"], [1190, 103, 1502811520735, "m"], [1187, 103, 1502811520752, "m"], [1182, 101, 1502811520768, "m"], [1175, 101, 1502811520788, "m"], [1167, 100, 1502811520804, "m"], [1144, 100, 1502811520844, "m"], [1123, 102, 1502811520871, "m"], [1115, 104, 1502811520886, "m"], [1101, 108, 1502811520919, "m"], [1089, 115, 1502811520935, "m"], [1076, 121, 1502811520951, "m"], [1064, 129, 1502811520971, "m"], [1043, 141, 1502811520992, "m"], [1033, 147, 1502811521007, "m"], [1005, 163, 1502811521038, "m"], [993, 169, 1502811521054, "m"], [983, 176, 1502811521070, "m"], [975, 181, 1502811521086, "m"], [962, 190, 1502811521118, "m"], [948, 197, 1502811521135, "m"], [938, 201, 1502811521151, "m"], [927, 202, 1502811521174, "m"], [912, 205, 1502811521190, "m"], [897, 205, 1502811521206, "m"], [874, 206, 1502811521238, "m"], [864, 208, 1502811521253, "m"], [854, 208, 1502811521269, "m"], [841, 208, 1502811521286, "m"], [810, 206, 1502811521319, "m"], [806, 205, 1502811521335, "m"], [804, 204, 1502811521353, "m"], [800, 203, 1502811521370, "m"], [799, 202, 1502811521389, "m"], [796, 198, 1502811521405, "m"], [786, 178, 1502811521437, "m"], [779, 160, 1502811521453, "m"], [778, 149, 1502811521469, "m"], [775, 137, 1502811521485, "m"], [775, 119, 1502811521518, "m"], [775, 113, 1502811521541, "m"], [776, 107, 1502811521557, "m"], [778, 104, 1502811521573, "m"], [780, 101, 1502811521587, "m"], [784, 95, 1502811521621, "m"], [787, 93, 1502811521637, "m"], [791, 91, 1502811521653, "m"], [800, 85, 1502811521668, "m"], [805, 81, 1502811521685, "m"], [819, 77, 1502811521727, "m"], [823, 77, 1502811521757, "m"], [826, 77, 1502811521772, "m"], [829, 77, 1502811521790, "m"], [834, 77, 1502811521805, "m"], [844, 77, 1502811521837, "m"], [852, 77, 1502811521852, "m"], [854, 77, 1502811521868, "m"], [862, 78, 1502811521886, "m"], [867, 79, 1502811521908, "m"], [872, 83, 1502811521924, "m"], [889, 93, 1502811521956, "m"], [898, 100, 1502811521972, "m"], [914, 109, 1502811521988, "m"], [927, 122, 1502811522004, "m"], [951, 143, 1502811522036, "m"], [962, 153, 1502811522052, "m"], [976, 161, 1502811522069, "m"], [985, 162, 1502811522085, "m"], [998, 162, 1502811522107, "m"], [1038, 170, 1502811522139, "m"], [1066, 178, 1502811522155, "m"], [1097, 187, 1502811522171, "m"], [1123, 195, 1502811522187, "m"], [1164, 205, 1502811522219, "m"], [1179, 210, 1502811522235, "m"], [1196, 215, 1502811522252, "m"], [1204, 217, 1502811522268, "m"], [1214, 221, 1502811522289, "m"], [1220, 222, 1502811522304, "m"], [1237, 229, 1502811522339, "m"], [1244, 231, 1502811522355, "m"], [1246, 233, 1502811522371, "m"], [1250, 234, 1502811522387, "m"], [1258, 238, 1502811522418, "m"], [1262, 241, 1502811522435, "m"], [1267, 244, 1502811522452, "m"], [1272, 247, 1502811522475, "m"], [1275, 249, 1502811522491, "m"], [1281, 251, 1502811522507, "m"], [1292, 256, 1502811522538, "m"], [1300, 259, 1502811522554, "m"], [1307, 262, 1502811522570, "m"], [1314, 265, 1502811522586, "m"], [1337, 270, 1502811522619, "m"], [1345, 270, 1502811522636, "m"], [1357, 270, 1502811522658, "m"], [1374, 270, 1502811522674, "m"], [1393, 270, 1502811522691, "m"], [1413, 270, 1502811522706, "m"], [1444, 270, 1502811522741, "m"], [1464, 270, 1502811522755, "m"], [1473, 270, 1502811522770, "m"], [1481, 270, 1502811522787, "m"], [1497, 268, 1502811522819, "m"], [1500, 266, 1502811522835, "m"], [1503, 265, 1502811522865, "m"], [1504, 263, 1502811522890, "m"], [1507, 260, 1502811522906, "m"], [1518, 246, 1502811522938, "m"], [1520, 239, 1502811522955, "m"], [1522, 234, 1502811522970, "m"], [1522, 228, 1502811522987, "m"], [1522, 226, 1502811523011, "m"], [1522, 218, 1502811523036, "m"], [1522, 215, 1502811523053, "m"], [1522, 212, 1502811523073, "m"], [1521, 209, 1502811523089, "m"], [1520, 203, 1502811523105, "m"], [1517, 192, 1502811523137, "m"], [1516, 180, 1502811523153, "m"], [1514, 157, 1502811523169, "m"], [1508, 109, 1502811523187, "m"], [1506, 70, 1502811523225, "m"], [1506, 55, 1502811523257, "m"], [1506, 54, 1502811523271, "m"], [1505, 54, 1502811523577, "m"], [1502, 56, 1502811523585, "m"], [1491, 64, 1502811523614, "m"], [1482, 73, 1502811523624, "m"], [1458, 88, 1502811523656, "m"], [1446, 94, 1502811523672, "m"], [1439, 97, 1502811523688, "m"], [1425, 105, 1502811523719, "m"], [1417, 108, 1502811523735, "m"], [1404, 113, 1502811523752, "m"], [1397, 116, 1502811523769, "m"], [1396, 117, 1502811523785, "m"], [1387, 119, 1502811523807, "m"], [1373, 128, 1502811523839, "m"], [1363, 133, 1502811523855, "m"], [1349, 139, 1502811523870, "m"], [1337, 144, 1502811523887, "m"], [1316, 155, 1502811523919, "m"], [1304, 162, 1502811523936, "m"], [1297, 168, 1502811523952, "m"], [1285, 179, 1502811523974, "m"], [1277, 185, 1502811523997, "m"], [1266, 194, 1502811524006, "m"], [1252, 206, 1502811524039, "m"], [1244, 211, 1502811524054, "m"], [1233, 217, 1502811524071, "m"], [1227, 220, 1502811524086, "m"], [1208, 228, 1502811524118, "m"], [1192, 234, 1502811524136, "m"], [1184, 238, 1502811524153, "m"], [1173, 243, 1502811524174, "m"], [1165, 248, 1502811524190, "m"], [1155, 252, 1502811524206, "m"], [1142, 259, 1502811524238, "m"], [1135, 262, 1502811524254, "m"], [1130, 267, 1502811524270, "m"], [1123, 270, 1502811524286, "m"], [1101, 282, 1502811524319, "m"], [1091, 284, 1502811524340, "m"], [1083, 289, 1502811524355, "m"], [1072, 292, 1502811524371, "m"], [1063, 297, 1502811524386, "m"], [1048, 303, 1502811524421, "m"], [1043, 304, 1502811524437, "m"], [1030, 307, 1502811524453, "m"], [1017, 309, 1502811524469, "m"], [998, 311, 1502811524485, "m"], [958, 311, 1502811524518, "m"], [947, 311, 1502811524541, "m"], [936, 311, 1502811524558, "m"], [928, 311, 1502811524573, "m"], [919, 313, 1502811524589, "m"], [913, 314, 1502811524605, "m"], [901, 316, 1502811524637, "m"], [896, 319, 1502811524653, "m"], [884, 324, 1502811524668, "m"], [870, 330, 1502811524685, "m"], [856, 337, 1502811524725, "m"], [853, 339, 1502811524757, "m"], [849, 342, 1502811524776, "m"], [845, 344, 1502811524789, "m"], [840, 347, 1502811524807, "m"], [836, 348, 1502811524836, "m"], [833, 349, 1502811524854, "m"], [829, 350, 1502811524869, "m"], [826, 351, 1502811524886, "m"], [820, 352, 1502811524924, "m"], [815, 352, 1502811524956, "m"], [811, 352, 1502811524972, "m"], [806, 352, 1502811524988, "m"], [801, 352, 1502811525004, "m"], [789, 351, 1502811525036, "m"], [785, 349, 1502811525052, "m"], [777, 341, 1502811525069, "m"], [772, 336, 1502811525087, "m"], [761, 325, 1502811525119, "m"], [757, 319, 1502811525139, "m"], [752, 314, 1502811525155, "m"], [744, 307, 1502811525171, "m"], [740, 304, 1502811525187, "m"], [731, 290, 1502811525219, "m"], [727, 285, 1502811525235, "m"], [722, 278, 1502811525252, "m"], [720, 274, 1502811525269, "m"], [717, 270, 1502811525291, "m"], [716, 268, 1502811525306, "m"], [713, 259, 1502811525337, "m"], [713, 258, 1502811525353, "m"], [710, 247, 1502811525371, "m"], [706, 240, 1502811525385, "m"], [702, 234, 1502811525419, "m"], [700, 233, 1502811525447, "m"], [696, 227, 1502811525475, "m"], [695, 221, 1502811525491, "m"], [694, 215, 1502811525507, "m"], [694, 203, 1502811525539, "m"], [694, 198, 1502811525555, "m"], [694, 194, 1502811525571, "m"], [694, 186, 1502811525587, "m"], [693, 173, 1502811525619, "m"], [693, 170, 1502811525635, "m"], [693, 168, 1502811525658, "m"], [693, 164, 1502811525674, "m"], [693, 160, 1502811525695, "m"], [693, 156, 1502811525711, "m"], [693, 155, 1502811525727, "m"], [693, 151, 1502811525754, "m"], [693, 149, 1502811525770, "m"], [693, 147, 1502811525786, "m"], [693, 141, 1502811525804, "m"], [686, 125, 1502811525836, "m"], [684, 121, 1502811525853, "m"], [682, 118, 1502811525873, "m"], [682, 115, 1502811525889, "m"], [682, 110, 1502811525905, "m"], [682, 101, 1502811525937, "m"], [682, 98, 1502811525953, "m"], [682, 94, 1502811525969, "m"], [680, 90, 1502811525985, "m"], [680, 85, 1502811526018, "m"], [680, 81, 1502811526038, "m"], [680, 80, 1502811526054, "m"], [680, 79, 1502811526070, "m"], [680, 77, 1502811526101, "m"], [679, 76, 1502811526226, "m"], [678, 76, 1502811526258, "m"], [677, 75, 1502811526272, "m"], [677, 74, 1502811526288, "m"], [676, 74, 1502811526378, "m"], [675, 74, 1502811526513, "m"], [675, 80, 1502811526536, "m"], [675, 85, 1502811526552, "m"], [679, 93, 1502811526569, "m"], [684, 97, 1502811526592, "m"], [690, 104, 1502811526615, "m"], [708, 110, 1502811526624, "m"], [747, 119, 1502811526655, "m"], [768, 121, 1502811526672, "m"], [783, 122, 1502811526687, "m"], [806, 122, 1502811526719, "m"], [814, 122, 1502811526735, "m"], [825, 118, 1502811526755, "m"], [836, 116, 1502811526769, "m"], [843, 111, 1502811526786, "m"], [848, 110, 1502811526807, "m"], [855, 107, 1502811526831, "m"], [861, 106, 1502811526855, "m"], [864, 105, 1502811526879, "m"], [865, 105, 1502811526887, "m"], [869, 101, 1502811526919, "m"], [875, 97, 1502811526936, "m"], [876, 95, 1502811526952, "m"], [878, 93, 1502811526974, "m"], [880, 91, 1502811526989, "m"], [880, 90, 1502811527005, "m"], [881, 87, 1502811527064, "m"], [883, 87, 1502811527096, "m"], [888, 85, 1502811527119, "m"], [893, 84, 1502811527135, "m"], [897, 84, 1502811527158, "m"], [901, 84, 1502811527174, "m"], [906, 84, 1502811527190, "m"], [913, 84, 1502811527207, "m"], [926, 84, 1502811527238, "m"], [931, 84, 1502811527254, "m"], [936, 84, 1502811527270, "m"], [939, 84, 1502811527286, "m"], [948, 84, 1502811527319, "m"], [951, 86, 1502811527342, "m"], [953, 86, 1502811527358, "m"], [955, 88, 1502811527374, "m"], [956, 89, 1502811527394, "m"], [957, 89, 1502811527414, "m"], [959, 93, 1502811527446, "m"], [961, 98, 1502811527469, "m"], [968, 110, 1502811527486, "m"], [978, 130, 1502811527519, "m"], [979, 140, 1502811527541, "m"], [982, 149, 1502811527557, "m"], [982, 157, 1502811527573, "m"], [982, 162, 1502811527589, "m"], [982, 169, 1502811527605, "m"], [978, 184, 1502811527637, "m"], [976, 191, 1502811527653, "m"], [970, 199, 1502811527669, "m"], [955, 211, 1502811527686, "m"], [935, 217, 1502811527722, "m"], [931, 219, 1502811527737, "m"], [916, 220, 1502811527753, "m"], [911, 221, 1502811527769, "m"], [903, 223, 1502811527787, "m"], [888, 224, 1502811527820, "m"], [883, 225, 1502811527836, "m"], [881, 225, 1502811527852, "m"], [865, 230, 1502811527879, "m"], [863, 231, 1502811527885, "m"], [847, 234, 1502811527924, "m"], [830, 238, 1502811527956, "m"], [820, 242, 1502811527971, "m"], [814, 247, 1502811527988, "m"], [796, 254, 1502811528004, "m"], [779, 260, 1502811528036, "m"], [770, 262, 1502811528053, "m"], [768, 262, 1502811528069, "m"], [758, 266, 1502811528085, "m"], [750, 266, 1502811528108, "m"], [741, 267, 1502811528124, "m"], [727, 268, 1502811528156, "m"], [723, 268, 1502811528174, "m"], [722, 268, 1502811528189, "m"], [719, 270, 1502811528469, "m"], [717, 273, 1502811528486, "m"], [701, 278, 1502811528507, "m"], [676, 280, 1502811528539, "m"], [672, 280, 1502811528564, "m"], [675, 280, 1502811528685, "m"], [682, 280, 1502811528704, "m"], [702, 280, 1502811528722, "m"], [724, 273, 1502811528739, "m"], [751, 269, 1502811528754, "m"], [777, 269, 1502811528770, "m"], [808, 269, 1502811528786, "m"], [862, 269, 1502811528819, "m"], [867, 269, 1502811528836, "m"], [868, 269, 1502811528852, "m"], [869, 269, 1502811528915, "m"], [873, 269, 1502811528939, "m"], [877, 269, 1502811528955, "m"], [878, 269, 1502811528970, "m"], [882, 269, 1502811528985, "m"], [916, 270, 1502811529020, "m"], [934, 270, 1502811529036, "m"], [953, 270, 1502811529055, "m"], [982, 270, 1502811529071, "m"], [1008, 270, 1502811529087, "m"], [1035, 270, 1502811529105, "m"], [1061, 270, 1502811529137, "m"], [1065, 270, 1502811529154, "m"], [1066, 270, 1502811529172, "m"], [1067, 270, 1502811529202, "m"], [1068, 270, 1502811529290, "m"], [1070, 270, 1502811529305, "m"], [1073, 270, 1502811529337, "m"], [1076, 270, 1502811529352, "m"], [1079, 270, 1502811529369, "m"], [1080, 270, 1502811529385, "m"], [1081, 270, 1502811529406, "m"], [1084, 270, 1502811529449, "m"], [1085, 270, 1502811529569, "m"], [1086, 270, 1502811529593, "m"], [1089, 270, 1502811529605, "m"], [1102, 271, 1502811529636, "m"], [1110, 273, 1502811529656, "m"], [1116, 273, 1502811529671, "m"], [1117, 273, 1502811529687, "m"], [1120, 275, 1502811529719, "m"], [1121, 275, 1502811529735, "m"], [1126, 275, 1502811529752, "m"], [1131, 275, 1502811529769, "m"], [1136, 275, 1502811529789, "m"], [1142, 275, 1502811529804, "m"], [1153, 275, 1502811529839, "m"], [1160, 275, 1502811529855, "m"], [1169, 275, 1502811529871, "m"], [1180, 275, 1502811529886, "m"], [1209, 275, 1502811529919, "m"], [1226, 275, 1502811529936, "m"], [1234, 275, 1502811529952, "m"], [1240, 275, 1502811529972, "m"], [1245, 272, 1502811529987, "m"], [1251, 267, 1502811530023, "m"], [1255, 262, 1502811530038, "m"], [1257, 254, 1502811530054, "m"], [1261, 247, 1502811530071, "m"], [1266, 237, 1502811530086, "m"], [1286, 202, 1502811530119, "m"], [1298, 183, 1502811530135, "m"], [1310, 168, 1502811530155, "m"], [1321, 152, 1502811530171, "m"], [1327, 143, 1502811530187, "m"], [1331, 139, 1502811530206, "m"], [1333, 136, 1502811530237, "m"], [1334, 135, 1502811530257, "m"], [1334, 137, 1502811530399, "m"], [1331, 139, 1502811530407, "m"], [1325, 143, 1502811530422, "m"], [1320, 148, 1502811530438, "m"], [1314, 151, 1502811530454, "m"], [1310, 154, 1502811530469, "m"], [1307, 156, 1502811530486, "m"], [1302, 159, 1502811530502, "m"], [1302, 158, 1502811530710, "m"], [1302, 157, 1502811530719, "m"], [1302, 153, 1502811530738, "m"], [1303, 149, 1502811530754, "m"], [1304, 147, 1502811530770, "m"], [1309, 142, 1502811530789, "m"], [1312, 137, 1502811530805, "m"], [1321, 133, 1502811530821, "m"], [1329, 127, 1502811530837, "m"], [1338, 123, 1502811530852, "m"], [1344, 119, 1502811530870, "m"], [1350, 116, 1502811530885, "m"], [1353, 115, 1502811530904, "m"], [1364, 113, 1502811530939, "m"], [1370, 113, 1502811530955, "m"], [1379, 113, 1502811530970, "m"], [1385, 113, 1502811530988, "m"], [1391, 113, 1502811531004, "m"], [1401, 113, 1502811531036, "m"], [1405, 113, 1502811531053, "m"], [1411, 113, 1502811531069, "m"], [1413, 113, 1502811531088, "m"], [1416, 113, 1502811531104, "m"], [1417, 113, 1502811531132, "m"], [1419, 113, 1502811531245, "m"], [1421, 111, 1502811531269, "m"], [1424, 109, 1502811531289, "m"], [1426, 108, 1502811531304, "m"], [1432, 104, 1502811531336, "m"], [1439, 100, 1502811531355, "m"], [1442, 99, 1502811531371, "m"], [1446, 98, 1502811531387, "m"], [1457, 89, 1502811531419, "m"], [1466, 81, 1502811531436, "m"], [1471, 77, 1502811531452, "m"], [1476, 72, 1502811531472, "m"], [1479, 71, 1502811531488, "m"], [1477, 69, 1502811531692, "m"], [1471, 70, 1502811531705, "m"], [1447, 75, 1502811531737, "m"], [1426, 77, 1502811531752, "m"], [1397, 82, 1502811531770, "m"], [1362, 82, 1502811531786, "m"], [1258, 82, 1502811531819, "m"], [1228, 82, 1502811531838, "m"], [1205, 81, 1502811531853, "m"], [1184, 78, 1502811531873, "m"], [1166, 75, 1502811531889, "m"], [1155, 74, 1502811531904, "m"], [1135, 72, 1502811531938, "m"], [1117, 68, 1502811531954, "m"], [1102, 66, 1502811531970, "m"], [1088, 65, 1502811531986, "m"], [1052, 59, 1502811532019, "m"], [1047, 59, 1502811532037, "m"], [1041, 59, 1502811532056, "m"], [1036, 59, 1502811532072, "m"], [1027, 59, 1502811532087, "m"], [1014, 59, 1502811532121, "m"], [1005, 59, 1502811532137, "m"], [993, 61, 1502811532153, "m"], [981, 62, 1502811532169, "m"], [959, 65, 1502811532186, "m"], [938, 69, 1502811532220, "m"], [925, 73, 1502811532239, "m"], [919, 75, 1502811532255, "m"], [910, 77, 1502811532270, "m"], [906, 79, 1502811532286, "m"], [899, 81, 1502811532305, "m"], [884, 86, 1502811532337, "m"], [880, 88, 1502811532353, "m"], [875, 89, 1502811532369, "m"], [869, 91, 1502811532386, "m"], [863, 91, 1502811532423, "m"], [861, 91, 1502811532438, "m"], [856, 91, 1502811532454, "m"], [853, 91, 1502811532470, "m"], [851, 91, 1502811532488, "m"], [850, 91, 1502811532504, "m"], [847, 91, 1502811532536, "m"], [844, 90, 1502811532556, "m"], [842, 89, 1502811532569, "m"], [841, 88, 1502811532601, "m"], [840, 87, 1502811532617, "m"], [840, 86, 1502811532633, "m"], [838, 83, 1502811532656, "m"], [838, 81, 1502811532672, "m"], [838, 79, 1502811532688, "m"], [838, 75, 1502811532720, "m"], [837, 74, 1502811532738, "m"], [837, 73, 1502811532769, "m"], [836, 72, 1502811532792, "m"], [835, 71, 1502811532856, "m"], [833, 69, 1502811532880, "m"], [830, 69, 1502811532904, "m"], [809, 69, 1502811532936, "m"], [798, 69, 1502811532953, "m"], [791, 69, 1502811532972, "m"], [783, 69, 1502811532988, "m"], [772, 71, 1502811533023, "m"], [770, 71, 1502811533038, "m"], [766, 72, 1502811533054, "m"], [765, 72, 1502811533070, "m"], [760, 72, 1502811533086, "m"], [739, 80, 1502811533120, "m"], [732, 81, 1502811533136, "m"], [730, 82, 1502811533155, "m"], [726, 82, 1502811533171, "m"], [717, 86, 1502811533186, "m"], [712, 86, 1502811533206, "m"], [705, 86, 1502811533237, "m"], [704, 86, 1502811533256, "m"], [702, 86, 1502811533271, "m"], [700, 86, 1502811533327, "m"], [687, 83, 1502811533353, "m"], [679, 78, 1502811533372, "m"], [674, 77, 1502811533388, "m"], [672, 76, 1502811533655, "m"], [674, 78, 1502811533678, "m"], [674, 79, 1502811533694, "m"], [678, 85, 1502811533719, "m"], [682, 91, 1502811533739, "m"], [684, 96, 1502811533754, "m"], [688, 104, 1502811533770, "m"], [693, 110, 1502811533789, "m"], [695, 117, 1502811533805, "m"], [696, 124, 1502811533836, "m"], [696, 126, 1502811533853, "m"], [696, 128, 1502811533873, "m"], [696, 131, 1502811533886, "m"], [698, 135, 1502811533904, "m"], [700, 143, 1502811533940, "m"], [701, 146, 1502811533955, "m"], [703, 149, 1502811533971, "m"], [704, 149, 1502811533989, "m"], [708, 149, 1502811534004, "m"], [743, 149, 1502811534036, "m"], [802, 149, 1502811534053, "m"], [846, 149, 1502811534069, "m"], [883, 149, 1502811534087, "m"], [919, 149, 1502811534123, "m"], [922, 149, 1502811534139, "m"], [924, 149, 1502811534154, "m"], [926, 147, 1502811534169, "m"], [927, 147, 1502811534188, "m"], [930, 145, 1502811534205, "m"], [937, 142, 1502811534237, "m"], [939, 141, 1502811534253, "m"], [942, 140, 1502811534269, "m"], [943, 140, 1502811534286, "m"], [946, 139, 1502811534306, "m"], [958, 137, 1502811534337, "m"], [964, 136, 1502811534356, "m"], [972, 134, 1502811534372, "m"], [979, 131, 1502811534388, "m"], [988, 129, 1502811534419, "m"], [991, 128, 1502811534436, "m"], [993, 127, 1502811534454, "m"], [994, 127, 1502811534473, "m"], [995, 125, 1502811534489, "m"], [999, 122, 1502811534504, "m"], [1018, 102, 1502811534539, "m"], [1028, 87, 1502811534555, "m"], [1038, 73, 1502811534571, "m"], [1043, 65, 1502811534587, "m"], [1047, 62, 1502811534740, "m"], [1050, 62, 1502811534754, "m"], [1053, 65, 1502811534770, "m"], [1057, 70, 1502811534786, "m"], [1065, 79, 1502811534820, "m"], [1067, 81, 1502811534836, "m"], [1070, 82, 1502811534856, "m"], [1077, 86, 1502811534870, "m"], [1082, 88, 1502811534887, "m"], [1089, 92, 1502811534905, "m"], [1104, 99, 1502811534937, "m"], [1110, 100, 1502811534953, "m"], [1116, 101, 1502811534970, "m"], [1129, 105, 1502811534987, "m"], [1142, 109, 1502811535022, "m"], [1147, 109, 1502811535037, "m"], [1150, 109, 1502811535053, "m"], [1154, 109, 1502811535073, "m"], [1159, 109, 1502811535088, "m"], [1162, 109, 1502811535104, "m"], [1164, 108, 1502811535139, "m"], [1165, 108, 1502811535156, "m"], [1166, 108, 1502811535172, "m"], [1169, 108, 1502811535186, "m"], [1174, 109, 1502811535223, "m"], [1176, 110, 1502811535237, "m"], [1177, 111, 1502811535254, "m"], [1179, 112, 1502811535282, "m"], [1181, 114, 1502811535314, "m"], [1183, 115, 1502811535337, "m"], [1186, 116, 1502811535353, "m"], [1193, 119, 1502811535369, "m"], [1200, 120, 1502811535386, "m"], [1210, 121, 1502811535423, "m"], [1214, 121, 1502811535438, "m"], [1218, 121, 1502811535454, "m"], [1222, 121, 1502811535472, "m"], [1227, 121, 1502811535489, "m"], [1229, 121, 1502811535504, "m"], [1233, 121, 1502811535536, "m"], [1237, 121, 1502811535553, "m"], [1244, 122, 1502811535569, "m"], [1250, 125, 1502811535586, "m"], [1258, 126, 1502811535606, "m"], [1269, 127, 1502811535637, "m"], [1272, 127, 1502811535656, "m"], [1277, 127, 1502811535672, "m"], [1282, 127, 1502811535688, "m"], [1292, 127, 1502811535704, "m"], [1305, 127, 1502811535736, "m"], [1321, 128, 1502811535753, "m"], [1328, 128, 1502811535770, "m"], [1339, 128, 1502811535789, "m"], [1348, 128, 1502811535805, "m"], [1356, 128, 1502811535836, "m"], [1360, 128, 1502811535855, "m"], [1366, 128, 1502811535872, "m"], [1369, 128, 1502811535887, "m"], [1384, 128, 1502811535920, "m"], [1390, 128, 1502811535936, "m"], [1395, 128, 1502811535954, "m"], [1400, 128, 1502811535969, "m"], [1401, 128, 1502811535989, "m"], [1402, 128, 1502811536005, "m"], [1405, 128, 1502811536048, "m"], [1407, 128, 1502811536072, "m"], [1409, 128, 1502811536087, "m"], [1423, 128, 1502811536119, "m"], [1431, 126, 1502811536137, "m"], [1436, 125, 1502811536157, "m"], [1442, 125, 1502811536172, "m"], [1445, 124, 1502811536188, "m"], [1458, 123, 1502811536222, "m"], [1465, 120, 1502811536238, "m"], [1472, 120, 1502811536254, "m"], [1477, 120, 1502811536270, "m"], [1480, 120, 1502811536289, "m"], [1481, 120, 1502811536423, "m"], [1482, 120, 1502811536463, "m"], [1482, 121, 1502811536471, "m"], [1482, 130, 1502811536487, "m"], [1485, 146, 1502811536521, "m"], [1485, 153, 1502811536536, "m"], [1485, 157, 1502811536556, "m"], [1485, 159, 1502811536572, "m"], [1485, 162, 1502811536590, "m"], [1485, 163, 1502811536605, "m"], [1485, 170, 1502811536637, "m"], [1484, 174, 1502811536654, "m"], [1482, 179, 1502811536669, "m"], [1478, 188, 1502811536686, "m"], [1477, 192, 1502811536704, "m"], [1473, 198, 1502811536739, "m"], [1472, 200, 1502811536755, "m"], [1470, 204, 1502811536770, "m"], [1469, 205, 1502811536786, "m"], [1468, 206, 1502811536805, "m"], [1467, 209, 1502811536837, "m"], [1466, 210, 1502811536853, "m"], [1463, 214, 1502811536870, "m"], [1460, 217, 1502811536887, "m"], [1459, 218, 1502811536906, "m"], [1457, 222, 1502811536938, "m"], [1456, 223, 1502811536953, "m"], [1455, 225, 1502811536972, "m"], [1452, 228, 1502811536988, "m"], [1450, 229, 1502811537004, "m"], [1441, 238, 1502811537036, "m"], [1435, 242, 1502811537053, "m"], [1428, 246, 1502811537069, "m"], [1420, 249, 1502811537090, "m"], [1404, 253, 1502811537105, "m"], [1346, 256, 1502811537140, "m"], [1310, 256, 1502811537156, "m"], [1273, 256, 1502811537172, "m"], [1243, 256, 1502811537187, "m"], [1216, 256, 1502811537204, "m"], [1146, 256, 1502811537237, "m"], [1121, 252, 1502811537253, "m"], [1096, 246, 1502811537273, "m"], [1068, 238, 1502811537289, "m"], [1041, 234, 1502811537304, "m"], [1014, 230, 1502811537324, "m"], [967, 222, 1502811537355, "m"], [952, 220, 1502811537370, "m"], [941, 219, 1502811537387, "m"], [926, 218, 1502811537420, "m"], [918, 218, 1502811537436, "m"], [916, 218, 1502811537453, "m"], [911, 216, 1502811537471, "m"], [906, 216, 1502811537487, "m"], [894, 214, 1502811537523, "m"], [887, 213, 1502811537538, "m"], [881, 213, 1502811537555, "m"], [875, 211, 1502811537571, "m"], [870, 209, 1502811537587, "m"], [854, 207, 1502811537620, "m"], [851, 205, 1502811537639, "m"], [850, 204, 1502811537655, "m"], [849, 204, 1502811537670, "m"], [845, 203, 1502811537690, "m"], [842, 201, 1502811537706, "m"], [830, 197, 1502811537736, "m"], [823, 195, 1502811537754, "m"], [820, 194, 1502811537770, "m"], [817, 193, 1502811537787, "m"], [812, 192, 1502811537820, "m"], [806, 190, 1502811537838, "m"], [801, 189, 1502811537853, "m"], [796, 188, 1502811537873, "m"], [792, 187, 1502811537888, "m"], [790, 185, 1502811537904, "m"], [788, 185, 1502811537924, "m"], [786, 185, 1502811537954, "m"], [783, 185, 1502811537970, "m"], [782, 185, 1502811537986, "m"], [778, 184, 1502811538021, "m"], [776, 184, 1502811538036, "m"], [773, 184, 1502811538056, "m"], [772, 184, 1502811538071, "m"], [767, 184, 1502811538087, "m"], [756, 184, 1502811538121, "m"], [753, 184, 1502811538137, "m"], [751, 184, 1502811538154, "m"], [749, 184, 1502811538173, "m"], [747, 184, 1502811538186, "m"], [745, 184, 1502811538204, "m"], [743, 184, 1502811538224, "m"], [733, 184, 1502811538255, "m"], [723, 185, 1502811538270, "m"], [717, 187, 1502811538289, "m"], [713, 187, 1502811538305, "m"], [711, 187, 1502811538337, "m"], [710, 187, 1502811538353, "m"], [708, 187, 1502811538370, "m"], [705, 187, 1502811538387, "m"], [704, 187, 1502811538417, "m"], [703, 188, 1502811538433, "m"], [701, 190, 1502811538453, "m"], [699, 192, 1502811538472, "m"], [694, 195, 1502811538488, "m"], [689, 199, 1502811538504, "m"], [680, 209, 1502811538536, "m"], [674, 218, 1502811538553, "m"], [674, 223, 1502811538570, "m"], [674, 228, 1502811538590, "m"], [674, 230, 1502811538605, "m"], [679, 233, 1502811538637, "m"], [686, 236, 1502811538656, "m"], [687, 238, 1502811538672, "m"], [694, 239, 1502811538688, "m"], [700, 244, 1502811538704, "m"], [722, 255, 1502811538737, "m"], [733, 257, 1502811538753, "m"], [745, 260, 1502811538773, "m"], [757, 260, 1502811538788, "m"], [767, 260, 1502811538804, "m"], [787, 260, 1502811538839, "m"], [793, 260, 1502811538855, "m"], [801, 260, 1502811538871, "m"], [812, 260, 1502811538887, "m"], [829, 260, 1502811538919, "m"], [841, 260, 1502811538937, "m"], [849, 260, 1502811538956, "m"], [857, 259, 1502811538971, "m"], [867, 257, 1502811538987, "m"], [874, 257, 1502811539007, "m"], [898, 255, 1502811539038, "m"], [915, 255, 1502811539053, "m"], [941, 255, 1502811539070, "m"], [965, 257, 1502811539087, "m"], [991, 263, 1502811539104, "m"], [1008, 264, 1502811539139, "m"], [1016, 264, 1502811539155, "m"], [1029, 262, 1502811539170, "m"], [1043, 258, 1502811539186, "m"], [1059, 251, 1502811539206, "m"], [1089, 231, 1502811539238, "m"], [1097, 225, 1502811539254, "m"], [1103, 219, 1502811539270, "m"], [1107, 215, 1502811539286, "m"], [1119, 199, 1502811539320, "m"], [1123, 193, 1502811539338, "m"], [1127, 186, 1502811539353, "m"], [1131, 181, 1502811539373, "m"], [1137, 174, 1502811539388, "m"], [1142, 168, 1502811539404, "m"], [1151, 156, 1502811539438, "m"], [1158, 152, 1502811539454, "m"], [1160, 150, 1502811539470, "m"], [1163, 147, 1502811539486, "m"], [1176, 141, 1502811539521, "m"], [1179, 140, 1502811539536, "m"], [1184, 137, 1502811539558, "m"], [1190, 135, 1502811539572, "m"], [1199, 134, 1502811539588, "m"], [1207, 134, 1502811539606, "m"], [1221, 131, 1502811539638, "m"], [1223, 131, 1502811539656, "m"], [1227, 131, 1502811539670, "m"], [1232, 131, 1502811539687, "m"], [1238, 131, 1502811539705, "m"], [1244, 131, 1502811539724, "m"], [1255, 131, 1502811539755, "m"], [1263, 131, 1502811539770, "m"], [1266, 131, 1502811539791, "m"], [1273, 131, 1502811539805, "m"], [1286, 131, 1502811539837, "m"], [1293, 132, 1502811539853, "m"], [1300, 135, 1502811539881, "m"], [1305, 142, 1502811539887, "m"], [1307, 146, 1502811539907, "m"], [1307, 157, 1502811539938, "m"], [1308, 158, 1502811539953, "m"], [1308, 161, 1502811539973, "m"], [1308, 162, 1502811539989, "m"], [1309, 163, 1502811540013, "m"], [1309, 164, 1502811540029, "m"], [1311, 167, 1502811540053, "m"], [1312, 168, 1502811540071, "m"], [1313, 170, 1502811540087, "m"], [1314, 172, 1502811540106, "m"], [1318, 179, 1502811540137, "m"], [1320, 183, 1502811540156, "m"], [1323, 186, 1502811540173, "m"], [1324, 187, 1502811540188, "m"], [1327, 190, 1502811540204, "m"], [1328, 195, 1502811540237, "m"], [1328, 198, 1502811540325, "m"], [1324, 204, 1502811540356, "m"], [1317, 208, 1502811540372, "m"], [1314, 211, 1502811540387, "m"], [1305, 215, 1502811540420, "m"], [1294, 220, 1502811540436, "m"], [1287, 223, 1502811540453, "m"], [1280, 228, 1502811540473, "m"], [1272, 233, 1502811540490, "m"], [1267, 235, 1502811540506, "m"], [1258, 241, 1502811540537, "m"], [1254, 243, 1502811540555, "m"], [1252, 245, 1502811540571, "m"], [1249, 247, 1502811540587, "m"], [1245, 256, 1502811540620, "m"], [1244, 259, 1502811540638, "m"], [1244, 264, 1502811540654, "m"], [1243, 270, 1502811540673, "m"], [1243, 274, 1502811540689, "m"], [1243, 275, 1502811540705, "m"], [1243, 280, 1502811540739, "m"], [1243, 281, 1502811540763, "m"], [1243, 282, 1502811540804, "m"], [1245, 282, 1502811540843, "m"], [1247, 282, 1502811540855, "m"], [1249, 282, 1502811540871, "m"], [1253, 282, 1502811540890, "m"], [1258, 282, 1502811540906, "m"], [1271, 282, 1502811540938, "m"], [1279, 282, 1502811540954, "m"], [1285, 282, 1502811540970, "m"], [1291, 282, 1502811540987, "m"], [1298, 282, 1502811541023, "m"], [1301, 282, 1502811541038, "m"], [1307, 282, 1502811541054, "m"], [1313, 282, 1502811541070, "m"], [1318, 282, 1502811541089, "m"], [1328, 281, 1502811541105, "m"], [1340, 279, 1502811541137, "m"], [1346, 279, 1502811541153, "m"], [1356, 279, 1502811541170, "m"], [1360, 279, 1502811541186, "m"], [1362, 279, 1502811541206, "m"], [1368, 279, 1502811541237, "m"], [1375, 279, 1502811541257, "m"], [1381, 280, 1502811541273, "m"], [1391, 280, 1502811541288, "m"], [1397, 280, 1502811541305, "m"], [1409, 280, 1502811541337, "m"], [1414, 280, 1502811541353, "m"], [1420, 280, 1502811541370, "m"], [1428, 280, 1502811541387, "m"], [1433, 280, 1502811541404, "m"], [1441, 280, 1502811541424, "m"], [1453, 280, 1502811541455, "m"], [1461, 280, 1502811541470, "m"], [1463, 281, 1502811541488, "m"], [1467, 281, 1502811541504, "m"], [1472, 281, 1502811541536, "m"], [1475, 281, 1502811541556, "m"], [1476, 281, 1502811541577, "m"], [1477, 280, 1502811541665, "m"], [1477, 274, 1502811541687, "m"], [1477, 266, 1502811541704, "m"], [1477, 247, 1502811541737, "m"], [1475, 235, 1502811541753, "m"], [1474, 231, 1502811541771, "m"], [1473, 226, 1502811541786, "m"], [1469, 212, 1502811541823, "m"], [1467, 204, 1502811541838, "m"], [1465, 199, 1502811541854, "m"], [1464, 194, 1502811541871, "m"], [1464, 187, 1502811541887, "m"], [1461, 167, 1502811541920, "m"], [1459, 160, 1502811541936, "m"], [1458, 154, 1502811541955, "m"], [1457, 145, 1502811541971, "m"], [1457, 140, 1502811541986, "m"], [1453, 134, 1502811542006, "m"], [1450, 126, 1502811542037, "m"], [1447, 121, 1502811542055, "m"], [1445, 118, 1502811542071, "m"], [1439, 112, 1502811542087, "m"], [1421, 103, 1502811542120, "m"], [1403, 95, 1502811542137, "m"], [1387, 88, 1502811542156, "m"], [1371, 84, 1502811542171, "m"], [1359, 81, 1502811542191, "m"], [1350, 79, 1502811542206, "m"], [1339, 79, 1502811542238, "m"], [1332, 79, 1502811542254, "m"], [1320, 79, 1502811542270, "m"], [1305, 79, 1502811542287, "m"]];

// @position: [x, y, action]
function mouseToKey(position) {
    return position.join(":");
}

// This should be a selfcontained file.  Any data you need should be embedded in this file.

var Predictor = (function() {

    // @boxes List of bounding boxes for the clickable elements on the page
    function Predictor(boxes) {
        this.boxes = boxes || [];
    };

    // TODO: override this function
    //
    // @trace list of [x, y, t, action] tuples.
    //        t might not be normalized to start at 0!
    //        action is "m", "d", or "u"
    //
    // @return a Distribution object whose predictions are arrays of
    //
    //            [x position, y position, action]
    //
    //         where action is "m", "d", or "u"
    //
    Predictor.prototype.predict = function(trace, deltaTime) {
        return new Dist.NaiveDistribution(mouseToKey);
    }
    return Predictor;
})();

var YourPredictor = (function(Predictor) {
    extend(YourPredictor, Predictor);

    function YourPredictor(boxes) {
        Predictor.apply(this, arguments);
    };

    // TODO: fill in with your code
    YourPredictor.prototype.predict = function(trace, deltaTime) {
        //console.log("trace:", trace);
        var pt = null;
        let mydists = [];
        if (trace.length <= 0) {
            if (trace.length == 0) return null;
            pt = trace[trace.length - 1];
        } else {

            // R to add random noise
            // to the known position of the mouse.  The higher the
            // values, the more noise
            var decay = 0.003;
            var R = Matrix.Diagonal([0.1, 0.1, 0, 0]);

            // initial state (location and velocity, acceleration)
            var x = $M([
                [trace[0][0]],
                [trace[0][1]],
                [0],
                [0],
                [0],
                [0]
            ]);

            // external motion
            var u = $M([
                [0],
                [0],
                [0],
                [0],
                [0],
                [0]
            ]);

            // initial uncertainty
            var P = Matrix.Random(6, 6);


            // measurement function (4D -> 2D)
            // This one has to be this way to make things run
            var H = $M([
                [1, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0],
                [0, 0, 0, 1, 0, 0]
            ]);

            // identity matrix
            var I = Matrix.I(6);

            // To determine dt
            var time = trace[0][2];

            var Q = $M(
                [
                    [0.1, 0, 0, 0, 0, 0],
                    [0, 0.1, 0, 0, 0, 0],
                    [0, 0, 0.1, 0, 0, 0],
                    [0, 0, 0, 0.1, 0, 0],
                    [0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0]
                ]);
            let timeElapse = [];
            for (let i = 0; i < trace.length - 1; i++) {
                timeElapse.push(trace[i + 1][2] - trace[i][2]);
            }
            for (var i = 1; i < trace.length; i++) {
                let dt = timeElapse[i - 1];
                // Derive the next state
                const dt2 = Math.pow(dt, 2);
                F = $M([
                    [1, 0, dt, 0, dt2, 0],
                    [0, 1, 0, dt, 0, dt2],
                    [0, 0, 1, 0, dt, 0],
                    [0, 0, 0, 1, 0, dt],
                    [0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 1]
                ]);

                // decay confidence
                // to account for change in velocity
                P = P.map(function(x) {
                    return x * (1 + decay * dt);
                });

                // Fake uncertaintity in our measurements
                let xMeasure = trace[i][0];
                let yMeasure = trace[i][1];
                let vxMeasure = (trace[i][0] - trace[i - 1][0]) / dt;
                let vyMeasure = (trace[i][1] - trace[i - 1][1]) / dt;


                // prediction
                x = F.x(x).add(u);
                P = F.x(P).x(F.transpose()).add(Q);

                // measurement update
                Z = $M([[xMeasure, yMeasure, vxMeasure, vyMeasure]]);
                y = Z.transpose().subtract(H.x(x));
                S = H.x(P).x(H.transpose()).add(R);

                K = P.x(H.transpose()).x(S.inverse());
                x = x.add(K.x(y));
                P = I.subtract(K.x(H)).x(P);

            }
            for (let i = 0; i < deltaTime.length; i++) {
                // Derive the next state
                const delta = deltaTime[i];
                const delta2 = Math.pow(deltaTime[i], 2);
                let F_time = $M([[1, 0, delta, 0, delta2, 0],
                    [0, 1, 0, delta, 0, delta2],
                    [0, 0, 1, 0, delta, 0],
                    [0, 0, 0, 1, 0, delta],
                    [0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 1]
                ]);

                // decay confidence
                // to account for change in velocity
                let P_time = P.map(function(x) {
                    return x * (1 + decay * deltaTime[i]);
                });

                // prediction
                let x_time = F_time.x(x).add(u);
                P_time = F_time.x(P_time).x(F_time.transpose()).add(Q);

                let mouseX = x_time.e(1, 1);
                let mouseY = x_time.e(2, 1);
                mydists.push([mouseX, mouseY, deltaTime[i]])
            }
        }
        return mydists;
    };
    return YourPredictor;
})(Predictor);

function findTarget(trace, end, time) {
    let index = end;
    let min = Math.abs(trace[end][2] - trace[end-1][2] - time);
    for(let i = end + 1; i <trace.length; i++) {
        if (Math.abs(trace[i][2] - trace[end-1][2] - time) < min) {
            min = Math.abs(trace[i][2] - trace[end-1][2] - time);
            index = i
        }
        else
            return index;
    }
    return index;
}

const timesteps = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
let predictor = new YourPredictor([]);
const length = 20;
const trialNumbers = 100;
function test(time, length) {
    const start = Math.floor(Math.random() * (longTrace.length - length - 100));
    const trainingSet = longTrace.slice(start, length + start);
    const targetIndex = findTarget(longTrace, start + length, time);
    const  targetPoint = longTrace[targetIndex];
    const tk = longTrace[targetIndex][2] - trainingSet[length - 1][2];
    let dist = predictor.predict(trainingSet, [tk]);
    const distance = Math.sqrt(Math.pow((targetPoint[0] - dist[0][0]), 2) + Math.pow((targetPoint[1] - dist[0][1]), 2));
    // console.log(">>>>>>>>>>>>>test result:");
    // console.log("trace:", trainingSet);
    // console.log("prediction:", dist[0]);
    // console.log("actual:", targetPoint);
    // console.log("distance:", distance);
    return distance;
}
let results = {};
for(let j = 0; j < timesteps.length; j++) {
    const time = timesteps[j];
    results[time+""] = 0;
}
for (let i = 0; i < trialNumbers; i++) {
    for(let j = 0; j < timesteps.length; j++) {
        const time = timesteps[j];
        const distance = test(time, length);
        results[time+""] += distance;
    }
}
for(let j = 0; j < timesteps.length; j++) {
    const time = timesteps[j];
    results[time+""] /= trialNumbers;
}
console.log(results);

module.exports = {
    Predictor: Predictor,
    YourPredictor: YourPredictor
}